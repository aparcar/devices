#!/usr/bin/env python3

import json
import yaml
from jsonschema import validate, RefResolver, ValidationError
from pathlib import Path
from sys import argv


def replace_ref(path):
    for key, value in path.items():
        if key == "$ref":
            path.update(store[value])
            path.pop("$ref")
            break
        elif type(value) == dict:
            replace_ref(value)


def validate_file(instance_file):
    print(f"Check metadata: {instance_file}")
    instance_content = yaml.safe_load(instance_file.read_text())
    try:
        validate(
            instance=instance_content,
            schema={"$ref": "file:device.yaml"},
            resolver=RefResolver("", {}, store=store),
        )
        print(f"Valid metadata: {instance_file}")

    except ValidationError as e:
        print(f"Bad metadata: {instance_file}")
        print(e)
        quit(1)


if len(argv) != 2:
    print(f"{argv[0]} <metadata file>")
    quit(1)

schema_path = Path("schemas")
assert schema_path.is_dir(), f"Schema folder does not exists at '{schema_path}'"

# load YAML schemas
store = {}
for schema in schema_path.glob("*.yaml"):
    store[f"file:{schema.name}"] = yaml.safe_load(schema.read_text())

if argv[1] == "merge-to-json":
    cpus = {}
    wifis = {}
    for device_path in Path("./data/").glob("*.yaml"):
        device_data = yaml.safe_load(device_path.read_text())
        cpu_model = device_data["cpu"].pop("model")
        if cpu_model not in cpus:
            cpus[cpu_model] = device_data["cpu"]
        for wifi_entry in device_data.get("wifi", []):
            wifi_model = wifi_entry.pop("model")
            if wifi_model not in wifis:
                wifis[wifi_model] = wifi_entry
    Path("form/public/cpus.json").write_text(json.dumps(cpus))
    Path("form/public/wifis.json").write_text(json.dumps(wifis))

    device = yaml.safe_load((schema_path / "device.yaml").read_text())
    replace_ref(device["properties"])
    device["properties"]["cpu"]["properties"]["model"]["enum"] = list(cpus.keys())
    Path("form/public/schema.json").write_text(json.dumps(device))


else:
    instance_files = []
    instance_path = Path(argv[1])
    if instance_path.is_file():
        instance_files.append(instance_path)
    elif instance_path.is_dir():
        instance_files.extend(instance_path.glob("*.yaml"))
    else:
        print(f"Metadata file does not exists at '{instance_path}'")
        quit(1)

    for instance_file in instance_files:
        validate_file(instance_file)
